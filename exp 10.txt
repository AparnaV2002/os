EXPERIMENT 10:
Write a C program perform Round Robin CPU scheduling algorithm by reading all the necessary data from file.


PROGRAM:
input.txt:
3
5
0  25
1  30
2  54

roundrobin.c
#include <stdio.h>
#include <stdlib.h>
int main(){
        int at[10];
        int bt[10],rt[10];
        
        
        int count,j,n,time,remain,flag=0,time_quantum;
       int wait_time=0,turnaround_time=0;

	
	FILE* fp = fopen("input.txt", "r");
	int max,i,q;
       fscanf(fp,"%d", &n);
       remain=n;
        fscanf(fp,"%d", &time_quantum);
	for(int i = 0; i < n; i++)
	{
	    	fscanf(fp,"%d", &at[i]);
	    	fscanf(fp,"%d",&bt[i]);
	    	rt[i]=bt[i];
	    	    
	}
	printf("\nTotal No of Processes= %d\n",n);
	printf("Time Quantum = %d\n",time_quantum);
	printf("\n\nProcessNo |Arrival Time|Burst Time\n");
	for(int i = 0; i < n; i++)
	{
	    
	    printf("Process %d\t %d\t  %d \n",i,at[i],bt[i]);
	    
	}
	
	
	for(time=0,count=0;remain!=0;)
	  {
	      if(rt[count]<=time_quantum && rt[count]>0)
	        {
	            time+=rt[count];
	            rt[count]=0;
	            flag=1;
	        }
	       else if(rt[count]>0)
	        {
	            rt[count]-=time_quantum;
	            time+=time_quantum;
	        }
	       if(rt[count]==0 && flag==1)
	        {
	            remain--;
	           // printf("P[%d]\t|\t%d\t|\t%d\n",count+1,time-at[count],time-at[count]-bt[count]);
	            wait_time+=time-at[count]-bt[count];
	            turnaround_time+=time-at[count];
	            flag=0;
	        }
	        if(count==n-1)
	           count=0;
	        else if(at[count+1]<=time)
	           count++;
	        else
	           count=0;
	  }
  printf("\nAverage Waiting Time= %f\n",wait_time*1.0/n);
  printf("Avg Turnaround Time = %f \n",turnaround_time*1.0/n);	
	return(0);


}